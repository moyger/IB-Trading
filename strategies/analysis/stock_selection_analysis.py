#!/usr/bin/env python3
"""
Stock Selection Strategy Analysis
Current: Fixed AMZN, TSLA, RBLX vs Dynamic rotation approach
"""

import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

def analyze_current_stock_selection():
    """
    Explain current stock selection criteria and rationale
    """
    
    print("üîç CURRENT STOCK SELECTION STRATEGY")
    print("=" * 80)
    print("üìä Fixed Portfolio: AMZN, TSLA, RBLX")
    print("üí∞ Equal weighting: $1,667 per stock")
    print("üéØ Strategy: Trend Composite with dynamic allocation")
    print()
    
    print("üìã WHY THESE 3 STOCKS?")
    print("=" * 50)
    
    selection_criteria = {
        'AMZN': {
            'why_selected': [
                'Mega-cap stability ($1.8T market cap)',
                'Multiple revenue streams (AWS, retail, advertising)',
                'Strong technical patterns and liquidity',
                'Lower volatility provides portfolio stability',
                'Institutional favorite with consistent volume'
            ],
            'sector': 'Cloud/E-commerce',
            'volatility': '~31% annual',
            'avg_volume': '44M shares/day',
            'market_cap': '$1.8T'
        },
        'TSLA': {
            'why_selected': [
                'High volatility creates clear trend signals',
                'Strong momentum history (100%+ moves possible)',
                'Different sector exposure (EV/Autonomous)',
                'Responds excellently to technical analysis',
                'High retail and institutional interest'
            ],
            'sector': 'EV/Autonomous',
            'volatility': '~64% annual', 
            'avg_volume': '103M shares/day',
            'market_cap': '$800B'
        },
        'RBLX': {
            'why_selected': [
                'Highest volatility = best trend composite signals',
                'Emerging growth in gaming/metaverse',
                'Low correlation with traditional tech',
                'Strong momentum potential (190% in backtest)',
                'Mid-cap provides different risk profile'
            ],
            'sector': 'Gaming/Metaverse',
            'volatility': '~48% annual',
            'avg_volume': '8M shares/day', 
            'market_cap': '$30B'
        }
    }
    
    for stock, info in selection_criteria.items():
        print(f"\nüéØ {stock} ({info['sector']})")
        print(f"   üìä Market Cap: {info['market_cap']} | Volatility: {info['volatility']}")
        print(f"   üìà Volume: {info['avg_volume']}")
        print("   ‚úÖ Selection Reasons:")
        for reason in info['why_selected']:
            print(f"      ‚Ä¢ {reason}")
    
    print(f"\nüèóÔ∏è PORTFOLIO CONSTRUCTION PRINCIPLES:")
    print("-" * 60)
    print("1. üéØ DIVERSIFICATION:")
    print("   ‚Ä¢ 3 different sectors (Cloud, EV, Gaming)")
    print("   ‚Ä¢ 3 different market caps (Mega, Large, Mid)")
    print("   ‚Ä¢ 3 different volatility levels (Low, High, Medium)")
    print()
    print("2. üìä TREND COMPOSITE COMPATIBILITY:")
    print("   ‚Ä¢ All stocks respond well to technical analysis")
    print("   ‚Ä¢ High enough volatility for meaningful signals")
    print("   ‚Ä¢ Sufficient liquidity for easy execution")
    print("   ‚Ä¢ Strong institutional following")
    print()
    print("3. üí∞ $5K CAPITAL CONSTRAINTS:")
    print("   ‚Ä¢ 3 stocks = $1,667 each (manageable position sizes)")
    print("   ‚Ä¢ Can buy meaningful share quantities")
    print("   ‚Ä¢ Transaction costs remain reasonable")
    print("   ‚Ä¢ Not over-diversified (which dilutes returns)")

def compare_fixed_vs_dynamic_approaches():
    """
    Compare current fixed approach vs dynamic stock rotation
    """
    
    print(f"\n‚öñÔ∏è FIXED vs DYNAMIC STOCK SELECTION")
    print("=" * 80)
    
    print("üîí CURRENT FIXED APPROACH:")
    print("-" * 40)
    print("‚úÖ ADVANTAGES:")
    print("   ‚Ä¢ Consistent, backtestable strategy")
    print("   ‚Ä¢ Lower transaction costs")
    print("   ‚Ä¢ Maintains sector diversification") 
    print("   ‚Ä¢ Known risk characteristics")
    print("   ‚Ä¢ Focus on trend composite optimization")
    print("   ‚Ä¢ Simple implementation")
    print()
    print("‚ùå DISADVANTAGES:")
    print("   ‚Ä¢ May hold declining stocks")
    print("   ‚Ä¢ Misses rotating sector leadership")
    print("   ‚Ä¢ Not pure momentum approach")
    print("   ‚Ä¢ Could underperform in momentum markets")
    print()
    
    print("üîÑ DYNAMIC MOMENTUM ROTATION:")
    print("-" * 40)
    print("‚úÖ ADVANTAGES:")
    print("   ‚Ä¢ Always holds strongest momentum stocks")
    print("   ‚Ä¢ Captures rotating sector leadership")
    print("   ‚Ä¢ True Nick Radge momentum approach")
    print("   ‚Ä¢ Could catch breakout stocks early")
    print("   ‚Ä¢ Avoids holding declining stocks")
    print()
    print("‚ùå DISADVANTAGES:")
    print("   ‚Ä¢ High portfolio turnover (more transactions)")
    print("   ‚Ä¢ May buy at momentum peaks")
    print("   ‚Ä¢ Less predictable/testable")
    print("   ‚Ä¢ Higher complexity for $5K account")
    print("   ‚Ä¢ Could miss mean reversion opportunities")

def recommend_optimal_approach():
    """
    Recommend the best approach for $5K capital
    """
    
    print(f"\nüèÜ RECOMMENDED APPROACH FOR $5K")
    print("=" * 60)
    print("HYBRID: Fixed Base + Momentum Filter")
    print()
    
    print("üìä IMPLEMENTATION:")
    print("-" * 30)
    print("1. üîí FIXED BASE PORTFOLIO:")
    print("   ‚Ä¢ Keep AMZN, TSLA, RBLX as core holdings")
    print("   ‚Ä¢ Maintain sector diversification")
    print("   ‚Ä¢ Continue using trend composite allocation")
    print()
    
    print("2. üöÄ ADD MOMENTUM FILTER:")
    print("   ‚Ä¢ Calculate 6-month momentum for each stock")
    print("   ‚Ä¢ If momentum < 0%, force allocation to 0%")
    print("   ‚Ä¢ Redistribute capital to positive momentum stocks")
    print("   ‚Ä¢ Weight allocation by relative momentum strength")
    print()
    
    print("3. üîÑ QUARTERLY REVIEW:")
    print("   ‚Ä¢ Every 3 months, evaluate replacement candidates")
    print("   ‚Ä¢ Replace stock only if new candidate has 20%+ higher momentum")
    print("   ‚Ä¢ Maintain sector diversification requirement")
    print("   ‚Ä¢ Limit to 1 stock change per quarter (reduce turnover)")
    print()
    
    print("üìà POSITION SIZE ENHANCEMENT:")
    print("-" * 40)
    print("Current: Equal 33.3% allocation per stock")
    print("Enhanced: Weight by momentum strength")
    print()
    print("Example momentum-weighted allocation:")
    print("‚Ä¢ Highest momentum stock: 40% of capital")
    print("‚Ä¢ Medium momentum stock:  35% of capital")
    print("‚Ä¢ Lowest momentum stock:  25% of capital")
    print()
    
    print("üéØ WHY THIS HYBRID APPROACH?")
    print("-" * 40)
    print("‚úÖ Combines stability of fixed portfolio")
    print("‚úÖ Adds momentum filtering for better stock selection")
    print("‚úÖ Reduces transaction costs vs full rotation")
    print("‚úÖ Maintains diversification benefits")
    print("‚úÖ Simple to implement and backtest")
    print("‚úÖ Scales well as capital grows")

def show_implementation_priorities():
    """
    Show implementation priorities
    """
    
    print(f"\nüìã IMPLEMENTATION ROADMAP")
    print("=" * 50)
    
    priorities = {
        "IMMEDIATE": [
            "‚úÖ Continue with current AMZN/TSLA/RBLX fixed portfolio",
            "‚úÖ Keep using trend composite allocation system", 
            "‚úÖ Focus on optimizing allocation levels and rebalancing frequency"
        ],
        "PHASE 2": [
            "üîÑ Add momentum filter to current strategy",
            "üìä Weight positions by 6-month momentum strength",
            "‚öñÔ∏è Force 0% allocation for negative momentum stocks"
        ],
        "PHASE 3": [
            "üîç Implement quarterly stock review process",
            "üìà Test replacement candidates (NVDA, PLTR, etc)",
            "üéØ Maintain 3-stock limit with sector diversity"
        ],
        "FUTURE": [
            "üí∞ When capital > $25K, consider full dynamic rotation",
            "üåê Expand to 5-stock universe with monthly rotation",
            "ü§ñ Automate momentum ranking and selection"
        ]
    }
    
    for phase, tasks in priorities.items():
        print(f"\n{phase}:")
        for task in tasks:
            print(f"   {task}")
    
    print(f"\nüí° KEY INSIGHT:")
    print("-" * 30)
    print("With $5K capital, focus on OPTIMIZING the current approach")
    print("rather than adding complexity. The trend composite system")
    print("is working well (+47.8% returns). Enhance it incrementally.")

def main():
    """
    Run complete stock selection analysis
    """
    
    # Analyze current approach
    analyze_current_stock_selection()
    
    # Compare approaches
    compare_fixed_vs_dynamic_approaches()
    
    # Recommend optimal approach
    recommend_optimal_approach()
    
    # Show implementation priorities
    show_implementation_priorities()
    
    print(f"\nüéØ BOTTOM LINE:")
    print("-" * 40)
    print("AMZN, TSLA, RBLX were selected for:")
    print("‚Ä¢ Sector diversification")
    print("‚Ä¢ Volatility spectrum for trend signals")
    print("‚Ä¢ Market cap diversification")
    print("‚Ä¢ Technical analysis compatibility")
    print()
    print("NEXT STEP: Add momentum filter to enhance")
    print("the existing fixed portfolio approach.")

if __name__ == "__main__":
    main()